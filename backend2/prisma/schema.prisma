// Tool to visualize ER diagram of db
// https://dbdiagram.io/

//more info at https://github.com/notiz-dev/prisma-dbml-generator?tab=readme-ov-file

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp", schema: "public")]
}

model ClassTeachers {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  classId   String?  @db.Uuid
  teacherId String?  @db.Uuid
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  class     Class?   @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Class {
  id            String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  longName      String?              @db.VarChar(255)
  shortName     String?              @db.VarChar(255)
  year          Int?
  semester      Int?
  domain        enum_Classes_domain?
  createdAt     DateTime             @db.Timestamptz(6)
  updatedAt     DateTime             @db.Timestamptz(6)
  classTeachers ClassTeachers[]
  forum         Forum?
  posts         Post[]
}

model Comment {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId    String?  @db.Uuid
  userId    String?  @db.Uuid
  message   String?  @db.VarChar(255)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Forum {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  classId   String?   @unique @db.Uuid
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
  class     Class?    @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages  Message[]
}

model Like {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId    String?  @db.Uuid
  userId    String?  @db.Uuid
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Message {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  forumId   String?  @db.Uuid
  userId    String?  @db.Uuid
  message   String?  @db.VarChar(255)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  forum     Forum?   @relation(fields: [forumId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Post {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  classId      String?   @db.Uuid
  userId       String?   @db.Uuid
  title        String?   @db.VarChar(255)
  description  String?   @db.VarChar(255)
  resourceType String?   @db.VarChar(255)
  resourceUrl  String?   @db.VarChar(255)
  classSection String?   @db.VarChar(255)
  createdAt    DateTime  @db.Timestamptz(6)
  updatedAt    DateTime  @db.Timestamptz(6)
  comments     Comment[]
  likes        Like[]
  class        Class?    @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Teacher {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String?         @unique @db.Uuid
  createdAt     DateTime        @db.Timestamptz(6)
  updatedAt     DateTime        @db.Timestamptz(6)
  classTeachers ClassTeachers[]
  user          User?           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id           String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fullName     String?          @db.VarChar(255)
  email        String?          @db.VarChar(255)
  role         enum_Users_role?
  createdAt    DateTime         @db.Timestamptz(6)
  updatedAt    DateTime         @db.Timestamptz(6)
  profileImage String?          @db.VarChar(255)
  comments     Comment[]
  likes        Like[]
  messages     Message[]
  posts        Post[]
  teacher      Teacher?
}

enum enum_Classes_domain {
  info
  mate
  cti
}

enum enum_Users_role {
  admin
  teacher
  student
}
